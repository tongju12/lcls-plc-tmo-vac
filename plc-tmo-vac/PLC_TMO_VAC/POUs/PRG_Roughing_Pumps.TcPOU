<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Roughing_Pumps" Id="{87120f5c-8975-4cdd-a125-ee85e558c6d5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Roughing_Pumps
VAR

    xRough1Vrc01_OpenOK: BOOL := False;
    xRough1Vrc02_OpenOK: BOOL := False;
    xRough2Vrc01_OpenOK: BOOL := False;
    dummy_FFFO : FB_HardwareFFOutput;
    dummy_fbArbiter1    :   FB_Arbiter(1);

    PA1K4_IP1_PTM_01_xExtIlkOK: BOOL := FALSE;
    PA1K4_IP1_PTM_02_xExtIlkOK: BOOL := FALSE;
    PA1K4_IP1_PTM_03_xExtIlkOK: BOOL := False;

    f_trig_r1 : F_TRIG;
    f_trig_r2 : F_TRIG;
    r_trig_r1 : R_TRIG;
    r_trig_r2 : R_TRIG;

    tonDelOK : TON;
    tDelOK	:	TIME := T#30S;
    xExtIlkOK : BOOL;

    tonDelSW : TON;


    IM4K4_PPM_PTM_01_xExtIlkOK: BOOL := FALSE;
    LI1K4_IP1_PTM_01_xExtIlkOK: BOOL := FALSE;
    LI3K4_IP1_OUT_PTM_01_xExtIlkOK: BOOL := False;
    IM5K4_PPM_PTM_01_xExtIlkOK: BOOL := False;

    rTolerance : REAL;
    xDifPressureOK : BOOL := FALSE;
    TMO_ROUGH1_VRC_01_xExt_OK : BOOL;
    TMO_ROUGH1_VRC_02_xExt_OK : BOOL;
    TMO_ROUGH2_VRC_01_xExt_OK : BOOL;

    xLAMP_VRC01_VRC02_atOpnLS: BOOL;
END_VAR

VAR RETAIN
    TM1K4_PTM_01_xExtIlkOK: BOOL := False;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* Roughing Valves *)

(* All three roughing valves permit to open when both side reading pressure below than setpoint, 1E-3 for both sides.
   When chamber is vented, bypass to open valve to pump down.
   FB_VGC_2S is used for VRC controls.

   For TMO_ROUGH1_VRC_01 & TMO_ROUGH1_VRC_02, additional interlock is implemented using i_xExt_OK input of VGC function:
   If pressure difference between TMO_ROUGH1_GPI_02 and TMO_ROUGH1_GPI_03 is greater than 20 Torr,
   only one of them permit to open.

   For TMO_ROUGH1_VRC_01 & TMO_ROUGH2_VRC_01 if one closed, wait for 10s, close the other.

*)


(* Check the pressure difference between TMO_ROUGH1_GPI_02 and TMO_ROUGH1_GPI_03 *)



rTolerance := 0.1;
xDifPressureOK := (ABS(TMO_ROUGH1_GPI_02.PG.rPRESS - TMO_ROUGH1_GPI_03.PG.rPRESS ) <= rTolerance ) AND
                  TMO_ROUGH1_GPI_02.PG.xPRESS_OK AND TMO_ROUGH1_GPI_03.PG.xPRESS_OK;

(* Set Rough1_vrc_01 external interlock OK TRUE, when:
     xDifPressureOK or TMO_ROUGH1_VRC_02 is closed
     AND if LAMP is connected, LAMP_ROUGH_VRC01 and VRC02 are open OR TMO_ROUGH2_VRC01 is open. *)

//IP1_ECAT_COM_ERROR = TRUE means that there is an EtherCAT Bridge Communication error.
IP1_ECAT_COM_ERROR := (xEcatBridge_TxPDO_state OR xEcatBridge_External_device_not_connected OR xEcatBridge_WcState);

xLAMP_VRC01_VRC02_atOpnLS := IP1_ROUGH_VRC_01_AtOpnLS AND NOT IP1_ECAT_COM_ERROR
                              AND IP1_ROUGH_VRC_02_AtOpnLS AND NOT IP1_ECAT_COM_ERROR;

//removing interlock from tmo_rough2_vrc_01 and IP1_VRC_02 interlock per James' request on 10-04-24
TMO_ROUGH1_VRC_01_xExt_OK := ( xDifPressureOK OR TMO_ROUGH1_VRC_02.iq_stValve.i_xClsLS )
                            AND (
                                  (IP1_ROUGH_VRC_01_AtOpnLS
                                  AND NOT IP1_ECAT_COM_ERROR)
                                  OR xPipe_replace_IP1  //request by Jeff on 8-21-25 to bypass ip1 logic when pipe is in

                               (*   and TMO_ROUGH2_VRC_01.iq_stValve.i_xOpnLS
                                  OR xLAMP_VRC01_VRC02_atOpnLS *)
                                 );


(* Set external interlock OK TRUE, when xDifPressureOK or TMO_ROUGH1_VRC_01 is closed *)

TMO_ROUGH1_VRC_02_xExt_OK := xDifPressureOK  OR TMO_ROUGH1_VRC_01.iq_stValve.i_xClsLS;
//make override of tmo_rough1_vrc-01 simple on 10-04-24

TMO_ROUGH1_VRC_01(
                i_stUSG := TMO_ROUGH1_GPI_02.PG,
                i_stDSG:= TMO_ROUGH1_GPI_01.PG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := TMO_ROUGH1_VRC_01_xExt_OK,
                i_xOverrideMode := xSystemOverrideMode_TMO AND xDifPressureOK(*TMO_ROUGH1_VRC_01_xExt_OK *),
                i_xReset := False,
                io_fbFFHWO :=dummy_FFFO,
                fbArbiter := dummy_fbArbiter1,
);


//make override of tmo_rough1_vrc-02 simple on 10-04-24

TMO_ROUGH1_VRC_02(
                i_stUSG := TMO_ROUGH1_GPI_03.PG,
                i_stDSG:= TMO_ROUGH1_GPI_01.PG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := TMO_ROUGH1_VRC_02_xExt_OK,
                i_xOverrideMode := xSystemOverrideMode_TMO AND xDifPressureOK (*TMO_ROUGH1_VRC_02_xExt_OK*),
                i_xReset := false,
                io_fbFFHWO :=dummy_FFFO,
                fbArbiter := dummy_fbArbiter1);


(* Set TMO_ROUGH2_VRC01 external interlock OK TRUE, if LAMP is connected, and either LAMP_ROUGH_VRC01, VRC02 and VRC03 are open
                    or both TMO_ROUGH1_VRC_01 and lamp_rough_vrc03 are open*)
//remove interlock with tmo_rough1_vrc_01 and IP1_rough_vrc_02, 01 and 03 interlocks per James's request on 10-04-24
TMO_ROUGH2_VRC_01_xExt_OK := (NOT IP1_ECAT_COM_ERROR AND
                        (  (IP1_ROUGH_VRC_01_AtOpnLS AND NOT IP1_ECAT_COM_ERROR
                                                  (*      AND IP1_ROUGH_VRC_02_AtOpnLS AND NOT IP1_ECAT_COM_ERROR *)
                                                        AND IP1_ROUGH_VRC_03_AtOpnLS AND NOT IP1_ECAT_COM_ERROR )
                        (*  OR ( TMO_ROUGH1_VRC_01.iq_stValve.i_xOpnLS and IP1_ROUGH_VRC_03_AtOpnLS AND NOT IP1_ECAT_COM_ERROR) *)
                          )) OR xPipe_replace_IP1 ;  //requested by jeff to use pipe to replace IP1 08-21-25

TMO_ROUGH2_VRC_01(
                i_stUSG := TMO_ROUGH2_GPI_02.PG,
                i_stDSG:= TMO_ROUGH2_GPI_01.PG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := TMO_ROUGH2_VRC_01_xExt_OK,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := false,
                io_fbFFHWO :=dummy_FFFO,
                fbArbiter := dummy_fbArbiter1);




(* Granite 1 K4S2 Differential Turbo pumps *)


(* check if PA1K4_IP1_PTM_03 is Atspd, if it is starting, set up a timer for 30s to *)

xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := PA1K4_IP1_PTM_01.iq_stPTM,
            i_stISG := TMO_ROUGH1_GPI_02.PG,
            i_stBSG := TMO_ROUGH1_GPI_02.PG,
            iq_stValve := TMO_ROUGH1_VRC_01.iq_stValve)	;

(* start when PTM03 is on*)
IF (PA1K4_IP1_PTM_03.iq_stPTM.i_xAtSpd) AND (NOT PA1K4_IP1_PTM_03.iq_stPTM.i_xFault) THEN
        PA1K4_IP1_PTM_01_xExtIlkOK := xExtIlkOK;

ELSIF (PA1K4_IP1_PTM_03.iq_stPTM.q_RunDO ) AND (NOT PA1K4_IP1_PTM_03.iq_stPTM.i_xFault ) THEN
    //delay timer
//  	  tonDelOK(IN:= xExtIlkOK, PT:=tDelOK);
    PA1K4_IP1_PTM_01_xExtIlkOK := xExtIlkOK ;
ELSE
        PA1K4_IP1_PTM_01_xExtIlkOK := FALSE;
END_IF


xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := PA1K4_IP1_PTM_02.iq_stPTM,
            i_stISG := TMO_ROUGH1_GPI_02.PG,
            i_stBSG := TMO_ROUGH1_GPI_02.PG,
            iq_stValve := TMO_ROUGH1_VRC_01.iq_stValve)	;

IF (PA1K4_IP1_PTM_03.iq_stPTM.i_xAtSpd) AND (NOT PA1K4_IP1_PTM_03.iq_stPTM.i_xFault) THEN
        PA1K4_IP1_PTM_02_xExtIlkOK := xExtIlkOK;

ELSIF (PA1K4_IP1_PTM_03.iq_stPTM.q_RunDO ) AND (NOT PA1K4_IP1_PTM_03.iq_stPTM.i_xFault ) THEN
    //delay timer
//  	  tonDelOK(IN:= xExtIlkOK, PT:=tDelOK);
    PA1K4_IP1_PTM_02_xExtIlkOK := xExtIlkOK;
ELSE
        PA1K4_IP1_PTM_02_xExtIlkOK := FALSE;
END_IF

PA1K4_IP1_PTM_03_xExtIlkOK  := F_Turbo_Protection_ILK(i_stTurbo := PA1K4_IP1_PTM_03.iq_stPTM,
            i_stISG := TMO_ROUGH1_GPI_02.PG,
            i_stBSG := TMO_ROUGH1_GPI_02.PG,
            iq_stValve := TMO_ROUGH1_VRC_01.iq_stValve)	;


PA1K4_IP1_PTM_01(i_xExtIlkOK := PA1K4_IP1_PTM_01_xExtIlkOK , iq_stPTM => );

PA1K4_IP1_PTM_02(i_xExtIlkOK := PA1K4_IP1_PTM_02_xExtIlkOK, iq_stPTM => );
PA1K4_IP1_PTM_03(i_xExtIlkOK := PA1K4_IP1_PTM_03_xExtIlkOK, iq_stPTM => );

(*Serial Interface*)
(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
st_Pfeiffer_CTRL_PTM_01_02_03[1].iSerialAddress :=10;//PA1K4_IP1_PTM_01
st_Pfeiffer_CTRL_PTM_01_02_03[1].xEnableComm := TRUE;
st_Pfeiffer_CTRL_PTM_01_02_03[2].iSerialAddress :=9;//PA1K4_IP1_PTM_02
st_Pfeiffer_CTRL_PTM_01_02_03[2].xEnableComm := TRUE;
st_Pfeiffer_CTRL_PTM_01_02_03[3].iSerialAddress :=1;//PA1K4_IP1_PTM_03
st_Pfeiffer_CTRL_PTM_01_02_03[3].xEnableComm := TRUE;
(* Instanitate the Function block for serial communication with Pfeiffer*)
PA1K4_IP1_PTM_01_02_03_COM(astPfeifferControl := st_Pfeiffer_CTRL_PTM_01_02_03,
               astPfeifferStatus:= st_Pfeiffer_RBK_PTM_01_02_03,
                SerialRXBuffer:= K4S2_02_E10_SerialRXBuffer,
                SerialTXBuffer:= K4S2_02_E10_SerialTXBuffer);
(* Copy Status Pv's into the PTM structure*)
PA1K4_IP1_PTM_01.M_Serial_IO(st_Pfeiffer_CTRL:=st_Pfeiffer_CTRL_PTM_01_02_03[1],st_Pfeiffer_RBK:=st_Pfeiffer_RBK_PTM_01_02_03[1]);
PA1K4_IP1_PTM_02.M_Serial_IO(st_Pfeiffer_CTRL:=st_Pfeiffer_CTRL_PTM_01_02_03[2],st_Pfeiffer_RBK:=st_Pfeiffer_RBK_PTM_01_02_03[2]);
PA1K4_IP1_PTM_03.M_Serial_IO(st_Pfeiffer_CTRL:=st_Pfeiffer_CTRL_PTM_01_02_03[3],st_Pfeiffer_RBK:=st_Pfeiffer_RBK_PTM_01_02_03[3]);

(* Leybold turbo pumps on Granite 1 *)

IM4K4_PPM_PTM_01_xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := IM4K4_PPM_PTM_01.iq_stPTM,
            i_stISG := TMO_ROUGH1_GPI_02.PG,
            i_stBSG := TMO_ROUGH1_GPI_02.PG,
            iq_stValve := TMO_ROUGH1_VRC_01.iq_stValve)	;

IM4K4_PPM_PTM_01(i_xExtIlkOK := IM4K4_PPM_PTM_01_xExtIlkOK, iq_stPTM => );



(* Instanitate the Function block for serial communication with TD20 *)
IM4K4_PPM_PTM_01_COM(SerialRXBuffer := K4S2_02_E17_SerialRXBuffer,
                SerialTXBuffer:= K4S2_02_E17_SerialTXBuffer,
                astTD20Status=>);
(* Copy Status Pv's into the PTM structure*)
IM4K4_PPM_PTM_01.M_Serial_IO(IM4K4_PPM_PTM_01_COM.astTD20Status);



LI1K4_IP1_PTM_01_xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := LI1K4_IP1_PTM_01.iq_stPTM,
            i_stISG := TMO_ROUGH1_GPI_02.PG,
            i_stBSG := TMO_ROUGH1_GPI_02.PG,
            iq_stValve := TMO_ROUGH1_VRC_01.iq_stValve)	;

LI1K4_IP1_PTM_01(i_xExtIlkOK := LI1K4_IP1_PTM_01_xExtIlkOK, iq_stPTM => );

(* Instanitate the Function block for serial communication with TD20 *)
LI1K4_IP1_PTM_01_COM(SerialRXBuffer := K4S2_02_E18_SerialRXBuffer,
                SerialTXBuffer:= K4S2_02_E18_SerialTXBuffer,
                astTD20Status=>);
(* Copy Status Pv's into the PTM structure*)
LI1K4_IP1_PTM_01.M_Serial_IO(LI1K4_IP1_PTM_01_COM.astTD20Status);



(* Granite 2 K4S6 *)

LI3K4_IP1_OUT_PTM_01_xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := LI3K4_IP1_OUT_PTM_01.iq_stPTM,
            i_stISG := PA2K4_IP1_GPI_01.PG,
            i_stBSG := TMO_ROUGH1_GPI_03.PG,
            iq_stValve := TMO_ROUGH1_VRC_02.iq_stValve)	;

LI3K4_IP1_OUT_PTM_01(i_xExtIlkOK := LI3K4_IP1_OUT_PTM_01_xExtIlkOK, iq_stPTM => );

TM1K4_PTM_01_xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := TM1K4_PTM_01.iq_stPTM,
            i_stISG := PA2K4_IP1_GPI_01.PG,
            i_stBSG := TMO_ROUGH1_GPI_03.PG,
            iq_stValve := TMO_ROUGH1_VRC_02.iq_stValve)	;

TM1K4_PTM_01(i_xExtIlkOK := TM1K4_PTM_01_xExtIlkOK, iq_stPTM => );

IM5K4_PPM_PTM_01_xExtIlkOK := F_Turbo_Protection_ILK(i_stTurbo := IM5K4_PPM_PTM_01.iq_stPTM,
            i_stISG := PA2K4_IP1_GPI_01.PG,
            i_stBSG := TMO_ROUGH1_GPI_03.PG,
            iq_stValve := TMO_ROUGH1_VRC_02.iq_stValve)	;

IM5K4_PPM_PTM_01(i_xExtIlkOK := IM5K4_PPM_PTM_01_xExtIlkOK, iq_stPTM => );

(*Serial Interface*)
(*Assign adresses to the pfeiffer controllers connected to this serial terminal*)
st_Pfeiffer_CTRL_PTM_Granite2[1].iSerialAddress :=1;//LI3K4_IP1_OUT_PTM_01
st_Pfeiffer_CTRL_PTM_Granite2[1].xEnableComm := TRUE;
st_Pfeiffer_CTRL_PTM_Granite2[2].iSerialAddress :=7;//TM1K4_PTM_01
st_Pfeiffer_CTRL_PTM_Granite2[2].xEnableComm := TRUE;
st_Pfeiffer_CTRL_PTM_Granite2[3].iSerialAddress :=9; //IM5K4_PPM_PTM_01
st_Pfeiffer_CTRL_PTM_Granite2[3].xEnableComm := TRUE;
(* Instanitate the Function block for serial communication with Pfeiffer*)
Granite2_PTM_COM(astPfeifferControl := st_Pfeiffer_CTRL_PTM_Granite2,
               astPfeifferStatus:= st_Pfeiffer_RBK_PTM_Granite2,
                SerialRXBuffer:= K4S6_01_E5_SerialRXBuffer,
                SerialTXBuffer:= K4S6_01_E5_SerialTXBuffer);
(* Copy Status Pv's into the PTM structure*)
LI3K4_IP1_OUT_PTM_01.M_Serial_IO(st_Pfeiffer_CTRL:=st_Pfeiffer_CTRL_PTM_Granite2[1],st_Pfeiffer_RBK:=st_Pfeiffer_RBK_PTM_Granite2[1]);
TM1K4_PTM_01.M_Serial_IO(st_Pfeiffer_CTRL:=st_Pfeiffer_CTRL_PTM_Granite2[2],st_Pfeiffer_RBK:=st_Pfeiffer_RBK_PTM_Granite2[2]);
IM5K4_PPM_PTM_01.M_Serial_IO(st_Pfeiffer_CTRL:=st_Pfeiffer_CTRL_PTM_Granite2[3],st_Pfeiffer_RBK:=st_Pfeiffer_RBK_PTM_Granite2[3]);

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>